{"ast":null,"code":"import axios from 'axios';\nconst baseURL = 'http://127.0.0.1:8000/django/api/';\nconst axiosInstance = axios.create({\n  baseURL: baseURL,\n  timeout: 5000,\n  headers: {\n    Authorization: localStorage.getItem('access_token') ? 'JWT ' + localStorage.getItem('access_token') : null,\n    'Content-Type': 'application/json',\n    accept: 'application/json'\n  }\n}); //\n// axiosInstance.interceptors.response.use(\n//     (response) => {\n//         return response;\n//     },\n//     async function (error) {\n//         const originalRequest = error.config;\n//\n//         if (typeof error.response === 'undefined') {\n//             alert(\n//                 'A server/network error occurred. ' +\n//                 'Looks like CORS might be the problem. ' +\n//                 'Sorry about this - we will get it fixed shortly.'\n//             );\n//             return Promise.reject(error);\n//         }\n//\n//         if (\n//             error.response.status === 401 &&\n//             originalRequest.url === baseURL + 'token/refresh/'\n//         ) {\n//             window.location.href = '/login/';\n//             return Promise.reject(error);\n//         }\n//\n//         if (\n//             error.response.data.code === 'token_not_valid' &&\n//             error.response.status === 401 &&\n//             error.response.statusText === 'Unauthorized'\n//         ) {\n//             const refreshToken = localStorage.getItem('refresh_token');\n//\n//             if (refreshToken) {\n//                 const tokenParts = JSON.parse(atob(refreshToken.split('.')[1]));\n//\n//                 // exp date in token is expressed in seconds, while now() returns milliseconds:\n//                 const now = Math.ceil(Date.now() / 1000);\n//                 console.log(tokenParts.exp);\n//\n//                 if (tokenParts.exp > now) {\n//                     return axiosInstance\n//                         .post('/token/refresh/', { refresh: refreshToken })\n//                         .then((response) => {\n//                             localStorage.setItem('access_token', response.data.access);\n//                             localStorage.setItem('refresh_token', response.data.refresh);\n//\n//                             axiosInstance.defaults.headers['Authorization'] =\n//                                 'JWT ' + response.data.access;\n//                             originalRequest.headers['Authorization'] =\n//                                 'JWT ' + response.data.access;\n//\n//                             return axiosInstance(originalRequest);\n//                         })\n//                         .catch((err) => {\n//                             console.log(err);\n//                         });\n//                 } else {\n//                     console.log('Refresh token is expired', tokenParts.exp, now);\n//                     window.location.href = '/login/';\n//                 }\n//             } else {\n//                 console.log('Refresh token not available.');\n//                 window.location.href = '/login/';\n//             }\n//         }\n//\n//         // specific error handling done elsewhere\n//         return Promise.reject(error);\n//     }\n// );\n\nexport default axiosInstance;","map":{"version":3,"sources":["D:/django/ayon_uz/react_ayon_uz/src/axios.js"],"names":["axios","baseURL","axiosInstance","create","timeout","headers","Authorization","localStorage","getItem","accept"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,MAAMC,OAAO,GAAG,mCAAhB;AAEA,MAAMC,aAAa,GAAGF,KAAK,CAACG,MAAN,CAAa;AAC/BF,EAAAA,OAAO,EAAEA,OADsB;AAE/BG,EAAAA,OAAO,EAAE,IAFsB;AAG/BC,EAAAA,OAAO,EAAE;AACLC,IAAAA,aAAa,EAAEC,YAAY,CAACC,OAAb,CAAqB,cAArB,IACT,SAASD,YAAY,CAACC,OAAb,CAAqB,cAArB,CADA,GAET,IAHD;AAIL,oBAAgB,kBAJX;AAKLC,IAAAA,MAAM,EAAE;AALH;AAHsB,CAAb,CAAtB,C,CAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAeP,aAAf","sourcesContent":["import axios from 'axios';\r\n\r\nconst baseURL = 'http://127.0.0.1:8000/django/api/';\r\n\r\nconst axiosInstance = axios.create({\r\n    baseURL: baseURL,\r\n    timeout: 5000,\r\n    headers: {\r\n        Authorization: localStorage.getItem('access_token')\r\n            ? 'JWT ' + localStorage.getItem('access_token')\r\n            : null,\r\n        'Content-Type': 'application/json',\r\n        accept: 'application/json',\r\n    },\r\n});\r\n//\r\n// axiosInstance.interceptors.response.use(\r\n//     (response) => {\r\n//         return response;\r\n//     },\r\n//     async function (error) {\r\n//         const originalRequest = error.config;\r\n//\r\n//         if (typeof error.response === 'undefined') {\r\n//             alert(\r\n//                 'A server/network error occurred. ' +\r\n//                 'Looks like CORS might be the problem. ' +\r\n//                 'Sorry about this - we will get it fixed shortly.'\r\n//             );\r\n//             return Promise.reject(error);\r\n//         }\r\n//\r\n//         if (\r\n//             error.response.status === 401 &&\r\n//             originalRequest.url === baseURL + 'token/refresh/'\r\n//         ) {\r\n//             window.location.href = '/login/';\r\n//             return Promise.reject(error);\r\n//         }\r\n//\r\n//         if (\r\n//             error.response.data.code === 'token_not_valid' &&\r\n//             error.response.status === 401 &&\r\n//             error.response.statusText === 'Unauthorized'\r\n//         ) {\r\n//             const refreshToken = localStorage.getItem('refresh_token');\r\n//\r\n//             if (refreshToken) {\r\n//                 const tokenParts = JSON.parse(atob(refreshToken.split('.')[1]));\r\n//\r\n//                 // exp date in token is expressed in seconds, while now() returns milliseconds:\r\n//                 const now = Math.ceil(Date.now() / 1000);\r\n//                 console.log(tokenParts.exp);\r\n//\r\n//                 if (tokenParts.exp > now) {\r\n//                     return axiosInstance\r\n//                         .post('/token/refresh/', { refresh: refreshToken })\r\n//                         .then((response) => {\r\n//                             localStorage.setItem('access_token', response.data.access);\r\n//                             localStorage.setItem('refresh_token', response.data.refresh);\r\n//\r\n//                             axiosInstance.defaults.headers['Authorization'] =\r\n//                                 'JWT ' + response.data.access;\r\n//                             originalRequest.headers['Authorization'] =\r\n//                                 'JWT ' + response.data.access;\r\n//\r\n//                             return axiosInstance(originalRequest);\r\n//                         })\r\n//                         .catch((err) => {\r\n//                             console.log(err);\r\n//                         });\r\n//                 } else {\r\n//                     console.log('Refresh token is expired', tokenParts.exp, now);\r\n//                     window.location.href = '/login/';\r\n//                 }\r\n//             } else {\r\n//                 console.log('Refresh token not available.');\r\n//                 window.location.href = '/login/';\r\n//             }\r\n//         }\r\n//\r\n//         // specific error handling done elsewhere\r\n//         return Promise.reject(error);\r\n//     }\r\n// );\r\n\r\nexport default axiosInstance;"]},"metadata":{},"sourceType":"module"}