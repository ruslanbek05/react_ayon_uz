{"ast":null,"code":"import axios from 'axios'; // const baseURL = 'http://127.0.0.1:8000/django/api/';\n\nvar baseURL = 'django/api/';\n\nif (window.location.hostname === \"localhost\" || window.location.hostname === \"127.0.0.1\") {\n  baseURL = 'http://127.0.0.1:8000/django/api/';\n} else {\n  baseURL = 'https://www.ayon.uz/django/api/';\n}\n\nconst axiosInstance = axios.create({\n  baseURL: baseURL,\n  timeout: 5000,\n  headers: {\n    Authorization: localStorage.getItem('access_token') ? 'JWT ' + localStorage.getItem('access_token') : null,\n    'Content-Type': 'application/json',\n    accept: 'application/json'\n  }\n});\naxiosInstance.interceptors.response.use(response => {\n  return response;\n}, async function (error) {\n  const originalRequest = error.config;\n\n  if (typeof error.response === 'undefined') {\n    alert('A server/network error occurred. ' + 'Looks like CORS might be the problem. ' + 'Sorry about this - we will get it fixed shortly.');\n    return Promise.reject(error);\n  }\n\n  if (error.response.status === 401 && originalRequest.url === baseURL + 'token/refresh/') {\n    window.location.href = '/login/';\n    return Promise.reject(error);\n  }\n\n  if (error.response.data.code === 'token_not_valid' && error.response.status === 401 && error.response.statusText === 'Unauthorized') {\n    const refreshToken = localStorage.getItem('refresh_token');\n\n    if (refreshToken) {\n      const tokenParts = JSON.parse(atob(refreshToken.split('.')[1])); // exp date in token is expressed in seconds, while now() returns milliseconds:\n\n      const now = Math.ceil(Date.now() / 1000);\n      console.log(tokenParts.exp);\n\n      if (tokenParts.exp > now) {\n        return axiosInstance.post('/token/refresh/', {\n          refresh: refreshToken\n        }).then(response => {\n          localStorage.setItem('access_token', response.data.access);\n          localStorage.setItem('refresh_token', response.data.refresh);\n          axiosInstance.defaults.headers['Authorization'] = 'JWT ' + response.data.access;\n          originalRequest.headers['Authorization'] = 'JWT ' + response.data.access;\n          return axiosInstance(originalRequest);\n        }).catch(err => {\n          console.log(err);\n        });\n      } else {\n        console.log('Refresh token is expired', tokenParts.exp, now);\n        window.location.href = '/login/';\n      }\n    } else {\n      console.log('Refresh token not available.');\n      window.location.href = '/login/';\n    }\n  } // specific error handling done elsewhere\n\n\n  return Promise.reject(error);\n});\nexport default axiosInstance;","map":{"version":3,"sources":["D:/django/ayon_uz/react_ayon_uz/src/axios.js"],"names":["axios","baseURL","window","location","hostname","axiosInstance","create","timeout","headers","Authorization","localStorage","getItem","accept","interceptors","response","use","error","originalRequest","config","alert","Promise","reject","status","url","href","data","code","statusText","refreshToken","tokenParts","JSON","parse","atob","split","now","Math","ceil","Date","console","log","exp","post","refresh","then","setItem","access","defaults","catch","err"],"mappings":"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","sourcesContent":["import axios from 'axios';\r\n\r\n// const baseURL = 'http://127.0.0.1:8000/django/api/';\r\n\r\nvar baseURL = 'django/api/';\r\nif (window.location.hostname === \"localhost\" || window.location.hostname === \"127.0.0.1\")\r\n{\r\n    baseURL = 'http://127.0.0.1:8000/django/api/';\r\n\r\n}\r\nelse\r\n{\r\n    baseURL = 'https://www.ayon.uz/django/api/';\r\n}\r\n\r\nconst axiosInstance = axios.create({\r\n    baseURL: baseURL,\r\n    timeout: 5000,\r\n    headers: {\r\n        Authorization: localStorage.getItem('access_token')\r\n            ? 'JWT ' + localStorage.getItem('access_token')\r\n            : null,\r\n        'Content-Type': 'application/json',\r\n        accept: 'application/json',\r\n    },\r\n});\r\n\r\naxiosInstance.interceptors.response.use(\r\n    (response) => {\r\n        return response;\r\n    },\r\n    async function (error) {\r\n        const originalRequest = error.config;\r\n\r\n        if (typeof error.response === 'undefined') {\r\n            alert(\r\n                'A server/network error occurred. ' +\r\n                'Looks like CORS might be the problem. ' +\r\n                'Sorry about this - we will get it fixed shortly.'\r\n            );\r\n            return Promise.reject(error);\r\n        }\r\n\r\n        if (\r\n            error.response.status === 401 &&\r\n            originalRequest.url === baseURL + 'token/refresh/'\r\n        ) {\r\n            window.location.href = '/login/';\r\n            return Promise.reject(error);\r\n        }\r\n\r\n        if (\r\n            error.response.data.code === 'token_not_valid' &&\r\n            error.response.status === 401 &&\r\n            error.response.statusText === 'Unauthorized'\r\n        ) {\r\n            const refreshToken = localStorage.getItem('refresh_token');\r\n\r\n            if (refreshToken) {\r\n                const tokenParts = JSON.parse(atob(refreshToken.split('.')[1]));\r\n\r\n                // exp date in token is expressed in seconds, while now() returns milliseconds:\r\n                const now = Math.ceil(Date.now() / 1000);\r\n                console.log(tokenParts.exp);\r\n\r\n                if (tokenParts.exp > now) {\r\n                    return axiosInstance\r\n                        .post('/token/refresh/', { refresh: refreshToken })\r\n                        .then((response) => {\r\n                            localStorage.setItem('access_token', response.data.access);\r\n                            localStorage.setItem('refresh_token', response.data.refresh);\r\n\r\n                            axiosInstance.defaults.headers['Authorization'] =\r\n                                'JWT ' + response.data.access;\r\n                            originalRequest.headers['Authorization'] =\r\n                                'JWT ' + response.data.access;\r\n\r\n                            return axiosInstance(originalRequest);\r\n                        })\r\n                        .catch((err) => {\r\n                            console.log(err);\r\n                        });\r\n                } else {\r\n                    console.log('Refresh token is expired', tokenParts.exp, now);\r\n                    window.location.href = '/login/';\r\n                }\r\n            } else {\r\n                console.log('Refresh token not available.');\r\n                window.location.href = '/login/';\r\n            }\r\n        }\r\n\r\n        // specific error handling done elsewhere\r\n        return Promise.reject(error);\r\n    }\r\n);\r\n\r\nexport default axiosInstance;"]},"metadata":{},"sourceType":"module"}